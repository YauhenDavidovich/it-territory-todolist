{"version":3,"sources":["dal/todolist-api.ts","bll/auth-reducer.ts","components/Login.tsx","bll/todolist-reducer.ts","components/Todolist.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","process","todolistsAPI","get","title","post","authAPI","data","initialState","isLoggedIn","Login","dispatch","useDispatch","useSelector","state","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","then","res","resultCode","type","value","catch","error","console","log","to","className","handleSubmit","href","target","htmlFor","id","name","onChange","handleChange","placeholder","Todolist","todolist","todolists","useEffect","useState","td","updateTodo","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","map","addedDate","draggableId","draggableProps","dragHandleProps","onClick","item","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","tl","entityStatus","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61c17cdf.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': process.env.REACT_APP_API_KEY as string,\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return  instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        debugger\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n       return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<ResponseMeType>>('auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<ResponseMeType>>('auth/login');\r\n    }\r\n\r\n}\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType} from \"../dal/todolist-api\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\n","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {loginTC} from \"../bll/auth-reducer\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: true,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'required fill';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password must have'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/todolist'}/>\r\n    }\r\n    return (\r\n        <div className='main'>\r\n            <div className='mainBlock'>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.email}\r\n                        placeholder=\"Email\"/>\r\n\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        value={formik.values.password}\r\n                        onChange={formik.handleChange}\r\n                        placeholder=\"Password\"/>\r\n\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import {Dispatch} from 'redux'\r\nimport {todolistsAPI, TodolistType} from \"../dal/todolist-api\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(changeTodolistEntityStatusAC(todolistId))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                debugger\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {addTodolistTC, fetchTodolistsTC} from \"../bll/todolist-reducer\";\r\nimport {TodolistType} from \"../dal/todolist-api\";\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\n\r\nexport const Todolist = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const todolist = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [todolist])\r\n\r\n    const [td, updateTodo] = useState(todolist);\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.auth.isLoggedIn)\r\n    debugger\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    const addTodolist = () => {\r\n        dispatch(addTodolistTC(\"new todo2\"))\r\n    }\r\n\r\n    function handleOnDragEnd(result: any) {\r\n        if (!result.destination) return;\r\n        const items = Array.from(td);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        updateTodo(items);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            {todolist && todolist ?\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"todos\">\r\n                        {(provided) => (\r\n                            <ul className=\"todos\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {td.map(({id, title, addedDate}, index) => {\r\n                                    return (\r\n                                        <Draggable key={id} draggableId={id} index={index}>\r\n                                            {(provided) => (\r\n                                                <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                    <div className=\"date\">\r\n                                                        {addedDate}\r\n                                                    </div>\r\n                                                    <p>\r\n                                                        { title }\r\n                                                    </p>\r\n                                                </li>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    );\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ul>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                : <button onClick={addTodolist}>Add todo</button>}\r\n\r\n        </div>)\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport {Todolist} from \"./components/Todolist\";\n\nfunction App() {\n  return (\n      <Routes >\n        <Route path='/login' element={<Login/>}/>\n        <Route path='/todolist' element={<Todolist/>}/>\n        <Route path=\"*\" element={<Navigate to=\"/login\" />}/>\n      </Routes>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {todolistsReducer} from \"./todolist-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}