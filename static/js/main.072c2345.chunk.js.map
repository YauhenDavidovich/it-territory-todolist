{"version":3,"sources":["dal/todolist-api.ts","bll/auth-reducer.ts","components/Login.tsx","bll/todolist-reducer.ts","bll/tasks-reducer.ts","components/EditableSpan.tsx","components/TasksContainer.tsx","components/Todolist.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","process","todolistsAPI","get","title","post","id","put","todolistId","taskId","delete","taskTitile","model","authAPI","data","initialState","isLoggedIn","Login","dispatch","useDispatch","useSelector","state","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","then","res","resultCode","type","value","catch","error","console","log","to","className","handleSubmit","href","target","htmlFor","name","onChange","handleChange","placeholder","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","status","action","updateTaskAC","warn","EditableSpan","React","memo","props","useState","editMode","setEditMode","setTitle","e","currentTarget","autoFocus","onBlur","onDoubleClick","TasksContainer","allTodolistTasks","draggableTasks","updateTask","taskName","updateTaskName","useEffect","items","setTasksAC","deleteTaskHandler","removeTaskAC","onClick","item","onDragEnd","result","destination","Array","from","splice","source","index","reorderedItem","map","array","putAfterItemId","droppableId","provided","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","Completed","checked","handleChangeStatus","updateTaskTitle","Todolist","todolists","updateTodoTitle","changeTodolistTitleAC","changeTodolistTitleTC","todolist","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","filter","tl","entityStatus","todoListId","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.072c2345.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': process.env.REACT_APP_API_KEY as string,\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return  instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n       return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n    reorderTask(todolistId: string, taskId: string, model: UpdateTaskOrderType) {\r\n        return instance.put<GetTasksResponse>(`todo-lists/${todolistId}/tasks/${taskId}/reorder`, model);\r\n    },\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskOrderType = {\r\n    putAfterItemId: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<ResponseMeType>>('auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<ResponseMeType>>('auth/login');\r\n    }\r\n\r\n}\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType} from \"../dal/todolist-api\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\n","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {loginTC} from \"../bll/auth-reducer\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: true,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'required fill';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password must have'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/todolist'}/>\r\n    }\r\n    return (\r\n        <div className='main'>\r\n            <div className='mainBlock'>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.email}\r\n                        placeholder=\"Email\"/>\r\n\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        value={formik.values.password}\r\n                        onChange={formik.handleChange}\r\n                        placeholder=\"Password\"/>\r\n\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import {Dispatch} from 'redux'\r\nimport {todolistsAPI, TodolistType} from \"../dal/todolist-api\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(changeTodolistEntityStatusAC(todolistId))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                debugger\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import {Dispatch} from 'redux'\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolist-reducer\";\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType,\r\n    UpdateTaskOrderType\r\n} from \"../dal/todolist-api\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            debugger\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n            return state\r\n    }\r\n    return state\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const updateTaskOrderTC = (todolistId: string, taskId: string, model: UpdateTaskOrderType) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.reorderTask(todolistId, taskId, model)\r\n        .then((res) => {\r\n        // const tasks = res.data.items\r\n        // dispatch(setTasksAC(tasks, todolistId))\r\n    })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <input  value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTaskTC,\r\n    fetchTasksTC,\r\n    removeTaskTC,\r\n    TasksStateType,\r\n    updateTaskOrderTC,\r\n    updateTaskTC\r\n} from \"../bll/tasks-reducer\";\r\nimport {addTodolistTC, TodolistDomainType} from \"../bll/todolist-reducer\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\nimport {TaskStatuses, TaskType} from \"../dal/todolist-api\";\r\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype TasksPropsType = {\r\n    todolistId: string\r\n}\r\n\r\n\r\nexport const TasksContainer = (props: TasksPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    let allTodolistTasks = tasks[props.todolistId]\r\n    const [draggableTasks, updateTask] = useState(allTodolistTasks);\r\n    const [taskName, updateTaskName] = useState(\"New task\");\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    }, [])\r\n    useEffect(() => {\r\n        updateTask(allTodolistTasks)\r\n    }, [allTodolistTasks])\r\n\r\n    const handleAddedTaskName = (name: string) => {\r\n        updateTaskName(name)\r\n    }\r\n    const addTaskHandler = () => {\r\n        dispatch(addTaskTC(taskName, props.todolistId))\r\n    }\r\n\r\n    const deleteTaskHandler = (id: string) => {\r\n        dispatch(removeTaskTC(id, props.todolistId))\r\n    }\r\n\r\n    const updateTaskTitle = (id:string, title: string) => {\r\n        dispatch(updateTaskTC(id, {title:title},props.todolistId))\r\n    }\r\n\r\n    const handleChangeStatus = (id:string, e:boolean) => {\r\n        let newIsDoneValue = e\r\n        debugger\r\n        let status = 0;\r\n        if (newIsDoneValue) status = TaskStatuses.Completed\r\n        dispatch(updateTaskTC(id, {status:status},props.todolistId))\r\n    }\r\n\r\n    function handleOnDragEnd(result: any) {\r\n        if (!result.destination) return;\r\n        const items = Array.from(draggableTasks);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n\r\n        items.map((task, index, array)=>{\r\n\r\n            if(index) {\r\n                // dispatch(updateTaskOrderTC(props.todolistId, task.id,{putAfterItemId: array[index-1].id} ))\r\n            } else {\r\n                dispatch(updateTaskOrderTC(props.todolistId, task.id,{putAfterItemId: \"\"} ))\r\n            }\r\n            })\r\n\r\n        updateTask(items);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                value={taskName}\r\n                onChange={(e)=>handleAddedTaskName( e.currentTarget.value)}\r\n            />\r\n\r\n            <button onClick={addTaskHandler}>Add task</button>\r\n            {draggableTasks && draggableTasks ?\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"draggableTasks\">\r\n                        {(provided) => (\r\n                            <ul className=\"draggableTasks\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {draggableTasks.map(({id, description, title, status}, index) => {\r\n                                    return (\r\n                                        <Draggable key={id} draggableId={id} index={index}>\r\n                                            {(provided) => (\r\n                                                <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className={status === TaskStatuses.Completed ? 'task is-done' : 'task new'}>\r\n                                                    <label>\r\n                                                        <input\r\n                                                            type=\"checkbox\"\r\n                                                            checked={status === TaskStatuses.Completed}\r\n                                                            onChange={(e)=>handleChangeStatus(id, e.currentTarget.checked)}\r\n                                                        />\r\n                                                    </label>\r\n                                                    <div className=\"description\">\r\n                                                        {description}\r\n                                                    </div>\r\n                                                    <EditableSpan value={title} onChange={(e)=>updateTaskTitle(id, e)}/>\r\n                                                    <button onClick={()=>deleteTaskHandler(id)}>Delete</button>\r\n                                                </li>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    );\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ul>)}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                : null\r\n            }\r\n\r\n\r\n        </div>)\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {addTodolistTC, changeTodolistTitleTC, fetchTodolistsTC, TodolistDomainType} from \"../bll/todolist-reducer\";\r\nimport {TasksContainer} from \"./TasksContainer\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {updateTaskTC} from \"../bll/tasks-reducer\";\r\n\r\nexport const Todolist = () => {\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.auth.isLoggedIn)\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    const addTodolistHandler = () => {\r\n        dispatch(addTodolistTC(\"new todo2\"))\r\n    }\r\n\r\n    const updateTodoTitle = (id: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            {todolists && todolists ?\r\n                <div className='main'>\r\n                    <div className='mainBlock'>\r\n                        <div><h2><EditableSpan value={todolists[0].title}\r\n                                               onChange={(e) => updateTodoTitle(todolists[0].id, e)}/></h2>\r\n                        <p>double click to change name</p>\r\n                        </div>\r\n                        <TasksContainer todolistId={todolists[0].id}/>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                : <button onClick={addTodolistHandler}>Add todo</button>}\r\n\r\n        </div>)\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport {Todolist} from \"./components/Todolist\";\n\nfunction App() {\n  return (\n      <Routes >\n        <Route path='/login' element={<Login/>}/>\n        <Route path='/todolist' element={<Todolist/>}/>\n        <Route path=\"*\" element={<Navigate to=\"/login\" />}/>\n      </Routes>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {todolistsReducer} from \"./todolist-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}